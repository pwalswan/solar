Using Visual Studio Code for development
Created folder called solar and added a data directory with exercise data files
Download Docker Desktop for Mac Intel, choose default complete installation (added Docker to path for terminal commands)
Installed VSCode Python extension
My python3 --version is 3.8.5
Create virtual environment name venv 
python3.8 -m venv venv
source venv/bin/activate 

That created a venv in the project root with bin, lib and include

Installed VSCode Docker extension and let it generate default Python Dockerfile
My app entrypoint is solar.py (print("Executing"))

Create a new directory in your project area in your home dir, or elsewhere
git clone https://github.com/pwalswan/solar.git
docker build -t solar-image .
At a terminal command line type
    pwd

It will be something like /Users/<username>/<abc>
Use that as the path to the directory where the project was cloned, and replace <absolute>

docker run -v <absolute>/solar:/app solar-image

e.g.  mine was:
docker run -v /Users/paulswanson/work/solar3/solar:/app solar-image

I have the photon counts. Need to put that into an equation. I need to calculate the irradiance in Watts/m2/nm for UpScan and DownScan and compare results.
I also later need to add the temperature correction using data in detectorTemp.txt
I also later need to adjust for the grating offset using the data in referenceSpectrum.txt
I need to plot the data for the a and b cases.
I need a summary.

I need to load data. I'm using pandas instead of plain python since pandas has dataframe features and can later be plotted.
pip3 install pandas
This adds pandas, etc. to site-packages

Starting with plans since it includes the start and end times for the UpScan and DownScan periods
The integrationTime file appears to be the measurement period. It starts off at once per second and varies thereafter.

The Watts per wavelength comes from the number of counts at the grating position in insturmentTelemetry.txt. 
The grating position defines the wavelength, which is the first calculation.

The m^2 comes from the aperture area.

There is a sampling rate, cadence, frequency in integrationTime.txt. If the rate is 1000, keep the irradiance value.
Otherwise, detect a change by iterating through integrationTime and set the new integration time.